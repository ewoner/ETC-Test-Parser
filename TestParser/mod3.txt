####################################################################################################################################################################
#
# Configuration file for TestParser.ps1
#
# Filename: "mod?.conf" 
#	where:
#		? is the module's order in JCAC. See below.
#	
#File Context:	
# Lines that begin with '#' are ignored
# Required lines:
#	one Variable named "mod" assigned an integer to the current order in JCAC.
#   one Objectives Block.  Must have one line per line per "numOfObj"
#	one Variable name "numOfObj" set to the number of objectives.
#
# Other than the Objectives Block's basic formating, order of lines in file  
#	does not matter.  If two lines contain the same variable name, only the 
#	last ocurrance will be used, the others will basical by ignored.  This 
#	includes if there are Two different Objectives Blocks.
#	
# Format for basic value assignment lines:
#     <variables_name> = <string>
#			(spacing before or after '=' is  ignored)
#      where: 
#			<variable_name> can be only a signle case insensitive word of 
#				alpha-numaric characters with the underscore, 
#           	but cannot start with a digit.
#
#			<string>  can be any set of characters upto the end of line. 
#				Does not have to be have to in quotes
#				Quotes will be retained as either single or double.
#               Any trailing whitespace WILL be added to <string> 
#               if there are NO quotation marcks.
#
# Format for Objective Block:
#	<Objectives>
#   	One Line of text (without Mod# and Objective#) per objective 
#		Insure that the Objective Text is in the Order from the Guide.
#	</Objectives>
#
#
# Value asignment names:
#		mod --> the Mod's Number.  Used as a keyID for parsing as titles may change.
#		title --> The mod's string name.
#		htmlDirStr --> The directory (absolute or reletive to ps1 file's location) where to find the html files to parse.  Setting does NOT created
#		saveDirStr -->  The directory (aboslute or reletive to ps1 file's location) where to save results.  Setting does NOT create.
#		objRegexPattern --> a Regex search string to parse out the questions's HTML string.  MUST have at least TWO groups:
#				1st Capture Group will be the mod number
#				2nd Capture Group will be the mod objective number
#				3rd Capture Group will be the daily objective number
#		nameRegexPattern --> a Regex search string to parse out the student's name from the HTML file.
#       endOfQuestionRegexPattern --> a Regex search string that will signal to stop parsing a question
#		numOfObj --> The Highest mod objective number
#		numOfDays --> The Highest daily objective number
#		maxNumOfQuestions --> The maximum number of questions on the test.
#
# If either numOfObj or maxNumOfQuestions are zero (0), program will exit without parsing.
#
####################################################################################################################################################################
mod = 3
objRegexPattern = Objectives?:?[\W]+\d+\.(\d+)
nameRegexPattern = class=""\s*>((\w+[\. ]*){2,})<\/a><\/td><\/tr><tr><th class="cell" scope="row">Started on
endOfQuestionRegexPattern = <thead>
numOfObj = 0
numOfDays = 9
maxNumOfQuestions=42
numOfObj=13
#Test Directories
htmlDirStr = H:\Documents\Projects\TestParser\ETC-Test-Parser-next\TestParser\Mod3\Html_Files
saveDirStr = H:\Documents\Projects\TestParser\ETC-Test-Parser-next\TestParser\Mod3\Output_Files
<objectives>
Create unstructured programs using fundamental concepts. 
Discuss importance of programming history and its origins. 
Identify different language tiers and types of programming languages. 
Identify and use programming structural components. 
Apply the correct programming data types. 
Create procedural programs using fundamental concepts. 
Explain object-oriented programming concepts. 
Create, analyze, and compile simple C++ programs. 
Create object-oriented programs using fundamental concepts. 
Read and understand intermediate level C++ programs and trace execution path. 
Describe the Software Development Life Cycle. 
Describe the relationship between software programs and the OS. 
Design, develop, and use Regular Expressions in a compiled program.
</objectives>
